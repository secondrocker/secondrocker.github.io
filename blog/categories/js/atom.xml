<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Js | elephant]]></title>
  <link href="http://me.angry-arthas.com/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://me.angry-arthas.com/"/>
  <updated>2015-09-07T04:38:32+08:00</updated>
  <id>http://me.angry-arthas.com/</id>
  <author>
    <name><![CDATA[secondrocker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angularjs浅尝1]]></title>
    <link href="http://me.angry-arthas.com/blog/2015/09/06/angularjsqian-chang-1/"/>
    <updated>2015-09-06T00:39:14+08:00</updated>
    <id>http://me.angry-arthas.com/blog/2015/09/06/angularjsqian-chang-1</id>
    <content type="html"><![CDATA[<p>AngularJS是为了克服HTML在构建应用上的不足而设计的。通常，我们是通过以下技术来解决静态网页技术在构建动态应用上的不足：</p>

<ul>
<li>类库 - 类库是一些函数的集合，它能帮助你写WEB应用。起主导作用的是你的代码，由你来决定何时使用类库。类库有：jQuery等</li>
<li>框架 - 框架是一种特殊的、已经实现了的WEB应用，你只需要对它填充具体的业务逻辑。这里框架是起主导作用的，由它来根据具体的应用逻辑来调用你的代码。框架有：knockout、sproutcore等。</li>
</ul>


<p> AngularJS使用了不同的方法，它尝试去补足HTML本身在构建应用方面的缺陷。AngularJS通过使用我们称为标识符(directives)的结构，让浏览器能够识别新的语法。例如：</p>

<ul>
<li>使用双大括号语法进行数据绑定；</li>
<li>使用DOM控制结构来实现迭代或者隐藏DOM片段；</li>
<li>支持表单和表单的验证；</li>
<li>能将逻辑代码关联到相关的DOM元素上；</li>
<li>能将HTML分组成可重用的组件。</li>
</ul>


<p>Demo
<code>html
&lt;!doctype html&gt;
&lt;html ng-app="index"&gt;
  &lt;head&gt;
    &lt;title&gt;angularjs test&lt;/title&gt;
    &lt;script src = "http://me.angry-arthas.com/javascripts/angular-1.0.1.min.js"&gt;&lt;/script&gt;    
    &lt;script src = "http://me.angry-arthas.com/javascripts/controller.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body ng-controller="IndexCtrl" &gt;
    &lt;ul&gt;
      &lt;li ng-repeat="contact in contacts"&gt;
        name:,age:,hometown:,sb
      &lt;/li&gt;
    &lt;/ul&gt;
    name:&lt;input type="text" ng-model="new_contact.name" /&gt;
    age:&lt;input type="text" ng-model ="new_contact.age" /&gt;
    hometown:&lt;input type="text" ng-model = "new_contact.hometown" /&gt;
    &lt;button ng-click="add_contact()"&gt;新增&lt;/button&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code>
<code>js
angular.module('index',[]).controller('IndexCtrl',function($scope){
  $scope.contacts = [{
      name:'陈冠希,
      age:20,
      hometown:'hk
    },{
      name:'张柏芝,
      age:22,
      hometown:'hk'}];
  $scope.reset_contact = function(){
    $scope.new_contact = {
      name:'',
      age:'',
      hometown:''
    };};
  $scope.add_contact = function(){
    $scope.contacts.push($scope.new_contact);
    $scope.reset_contact();
  };});
</code>
ng-app表明angularjs将对其标签声明内的dom进行处理,index名字是作用域名，表明属于index作用域。angular.module(&lsquo;index&rsquo;,[]).controller表明在index作用域内定义controller，同理ng-controller表明其内的变量属于IndexCtrl。
ng-model声明此标检绑定在new_contact变量，angularjs控制其值随变量而改变。ng-click声明由add_contact处理点击。在li标签里面的ng-repeat=&ldquo;contact in contacts"语句是一个AngularJS迭代器。这个迭代器告诉AngularJS用第一个li标签作为模板为列表中的每一个联系人创建一个li元素。由此当点击新增按钮时将输入框内所代表的model添加到contacts内，并将add_contact变量置空，而页面的显示由angularjs自动完成。
angularjs只对ng-app内的dom起作用，因此可以在任何页面使用angularjs而不破坏ng-app外的所有dom，js。
angularjs与restful后端交互非常方便，使用ngResource组件，声明好CRUD的路径、http veb，就可方便调用save,update与后端交互。
Demo
<code>coffeescript
app=angular.module("index",["ngResource"])
app.factory "Contact",($resource) -&gt;
$resource("/contacts/:id.json",{id:"@id"},{update:{method:"put"}})
$scope.contacts = Contact.query # /contacts
Contact.save $scope.new_contact #create
contact.$update #更新
</code></p>

<p>转载请注明出处:<a href="http://me.angry-arthas.com/blog/2015/09/06/angularjsqian-chang-1/">me.angry-arthas.com/blog/2015/09/06/angularjsqian-chang-1/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Constructor &amp;&amp; Prototype]]></title>
    <link href="http://me.angry-arthas.com/blog/2015/03/18/constructor-and-and-prototype/"/>
    <updated>2015-03-18T16:42:25+08:00</updated>
    <id>http://me.angry-arthas.com/blog/2015/03/18/constructor-and-and-prototype</id>
    <content type="html"><![CDATA[<p>每个对象都是个散列表
每个原型都有相关连的函数,每个函数都有相关联的原型</p>

<pre><code class="js">var A = function(){};
var p = A.prototype ;
var c = p.constructor;
A==c
</code></pre>

<p>函数的对象的constructor就是该函数（未修改prototype）
<code>js
function A() {
}
var a = new A();
a.constructor == A
</code>
修改函数的prototype后其对象的constructor为新的prototype的constructor
<code>js
function A(){};
function B(){};
A.prototype = new B();
console.log((new A()).constructor); //为function B(){}
A.prototype.constructor = A;
console.log((new A()).constructor);//为function A(){}
</code>
{}(对象直接量)对象是function Object(){}的对象</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffeescript的=>]]></title>
    <link href="http://me.angry-arthas.com/blog/2014/08/27/coffeescriptde-equals-%3E/"/>
    <updated>2014-08-27T16:05:54+08:00</updated>
    <id>http://me.angry-arthas.com/blog/2014/08/27/coffeescriptde-equals-></id>
    <content type="html"><![CDATA[<p>瘦箭头 ->用于 function创建
<code>coffeescript
$("#login").click -&gt;
  alert("ca")
</code>
胖箭头=>把 this作为参数代入function
在function中使用this 为外部定义function的this，起到作用域转移的作用
<code>coffeescript
user_id="nidaye"
ele.addEventListener "click",(e)=&gt;
  alert(this.user_id)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Js闭包]]></title>
    <link href="http://me.angry-arthas.com/blog/2014/08/08/jsbi-bao/"/>
    <updated>2014-08-08T10:58:57+08:00</updated>
    <id>http://me.angry-arthas.com/blog/2014/08/08/jsbi-bao</id>
    <content type="html"><![CDATA[<p>创建一个对象时如果该对象用到某个内部作用域的变量，那么对这个内部作用域创建一个闭包</p>

<p>eg
<code>javascript
function a(){
  var n=0;
  addN=function(){
    n+=1;
    console.log(n);
  };
  return addN;
}
x=a();     //创建一个闭包
x();       //输出1
x();       //输出2
y=a();     //创建另一个闭包
y();       //输出1
</code></p>
]]></content>
  </entry>
  
</feed>
