<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Js | elephant]]></title>
  <link href="http://me.angry-arthas.com/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://me.angry-arthas.com/"/>
  <updated>2015-10-26T01:01:04+08:00</updated>
  <id>http://me.angry-arthas.com/</id>
  <author>
    <name><![CDATA[secondrocker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Requirejs]]></title>
    <link href="http://me.angry-arthas.com/blog/2015/09/14/requirejs/"/>
    <updated>2015-09-14T00:26:42+08:00</updated>
    <id>http://me.angry-arthas.com/blog/2015/09/14/requirejs</id>
    <content type="html"><![CDATA[<p>js通过script标签的默认加载方式是同步的，即第一个script标签内的js加载完成后，才开始加载第二个，以此类推，直至js文件全部加载完毕。且js的依赖关系必须通过script的顺序才能确保；而在js加载期间，浏览器将停止响应，这大大影响了用户体验，基于此，很多解决js以来和加载的方案出现,require js就是其中之一。</p>

<p>requirejs加载的模块，一般为符合AMD标准的模块，即用define定义，用ruturn返回暴露方法、变量的模块；requirejs也可以加载飞AMD标准的模块，但比较麻烦，这次不涉及。</p>

<p>require加载js主涉及以下方面:</p>

<ul>
<li>script 标签data-main属性声明requirejs加载的入口模块，async=&ldquo;true&rdquo;(非ie) 和defer(ie)标签表明异步加载。</li>
<li>require.config配置模块对应的路径</li>
<li>require声明依赖关系</li>
</ul>


<p>html demo
<code>html
  &lt;script src="js/require.js" defer async="true" data-main="js/main" &gt;&lt;/script&gt;
  &lt;!--给出requirejs路径，声明为异步加载，指定入口模块为main.js（可省略.js）--&gt;
</code>
main.js
<code>js
  require.config({
      //声明模块的位置
      paths: {
          "jquery":"libs/jquery"
          "login" : "libs/login"
      }
      //或使用baseUrl指定所有模块的路径
      baseUrl: "js/libs"
  });
  //使用require加载模块，第一个参数为数组，即要加载的模块，将按数组顺序加载；第二个为回调函数，在全部加载完成后执行。
  require(['jquery','login'],function($,Login){
      alert("jquery and login module load success!");
      Login.do_login();
      //some else
 });
</code>
符合amd的login module定义
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="c1">//依赖jquery的定义</span>
</span><span class='line'>  <span class="nx">define</span><span class="p">([</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">jquery</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;],</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">){</span>
</span><span class='line'>     <span class="c1">// some definations</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">do_login</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">/sessions/create&amp;rsquo;,{uname:$(&amp;ldquo;#uname&amp;rdquo;).val(),</span>
</span><span class='line'>                  <span class="nx">password</span><span class="o">:</span><span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="err">#</span><span class="nx">password</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">val</span><span class="p">()},</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>          <span class="c1">//some</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>     <span class="k">return</span> <span class="p">{</span><span class="nx">do_login</span><span class="o">:</span><span class="nx">do_login</span><span class="p">};</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">//不依赖其他模块的定义</span>
</span><span class='line'><span class="nx">define</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">//some definations</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">xx</span><span class="o">:</span><span class="nx">xx</span><span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>
rails没有应用js加载器，一方面是新版本的rails的asset pipe会将所有的js文件打包为一个js文件，没有多个js加载的状态，另一方面turbolink使用褒贬参半的所谓pjax技术，默认链接改为ajax方式，只获取html的bod部分,head部分不变动，使js的加载只在第一次打开网站时进行。</p>

<p>转载请注明出处:<a href="http://me.angry-arthas.com/blog/2015/09/14/requirejs/">http://me.angry-arthas.com/blog/2015/09/14/requirejs/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angularjs浅尝1]]></title>
    <link href="http://me.angry-arthas.com/blog/2015/09/06/angularjsqian-chang-1/"/>
    <updated>2015-09-06T00:39:14+08:00</updated>
    <id>http://me.angry-arthas.com/blog/2015/09/06/angularjsqian-chang-1</id>
    <content type="html"><![CDATA[<p>AngularJS是为了克服HTML在构建应用上的不足而设计的。通常，我们是通过以下技术来解决静态网页技术在构建动态应用上的不足：</p>

<ul>
<li>类库 - 类库是一些函数的集合，它能帮助你写WEB应用。起主导作用的是你的代码，由你来决定何时使用类库。类库有：jQuery等</li>
<li>框架 - 框架是一种特殊的、已经实现了的WEB应用，你只需要对它填充具体的业务逻辑。这里框架是起主导作用的，由它来根据具体的应用逻辑来调用你的代码。框架有：knockout、sproutcore等。</li>
</ul>


<p> AngularJS使用了不同的方法，它尝试去补足HTML本身在构建应用方面的缺陷。AngularJS通过使用我们称为标识符(directives)的结构，让浏览器能够识别新的语法。例如：</p>

<ul>
<li>使用双大括号语法进行数据绑定；</li>
<li>使用DOM控制结构来实现迭代或者隐藏DOM片段；</li>
<li>支持表单和表单的验证；</li>
<li>能将逻辑代码关联到相关的DOM元素上；</li>
<li>能将HTML分组成可重用的组件。</li>
</ul>


<p>Demo
<code>html
&lt;!doctype html&gt;
&lt;html ng-app="index"&gt;
  &lt;head&gt;
    &lt;title&gt;angularjs test&lt;/title&gt;
    &lt;script src = "http://me.angry-arthas.com/javascripts/angular-1.0.1.min.js"&gt;&lt;/script&gt;    
    &lt;script src = "http://me.angry-arthas.com/javascripts/controller.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body ng-controller="IndexCtrl" &gt;
    &lt;ul&gt;
      &lt;li ng-repeat="contact in contacts"&gt;
        name:,age:,hometown:,sb
      &lt;/li&gt;
    &lt;/ul&gt;
    name:&lt;input type="text" ng-model="new_contact.name" /&gt;
    age:&lt;input type="text" ng-model ="new_contact.age" /&gt;
    hometown:&lt;input type="text" ng-model = "new_contact.hometown" /&gt;
    &lt;button ng-click="add_contact()"&gt;新增&lt;/button&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code>
<code>js
angular.module('index',[]).controller('IndexCtrl',function($scope){
  $scope.contacts = [{
      name:'陈冠希,
      age:20,
      hometown:'hk
    },{
      name:'张柏芝,
      age:22,
      hometown:'hk'}];
  $scope.reset_contact = function(){
    $scope.new_contact = {
      name:'',
      age:'',
      hometown:''
    };};
  $scope.add_contact = function(){
    $scope.contacts.push($scope.new_contact);
    $scope.reset_contact();
  };});
</code>
ng-app表明angularjs将对其标签声明内的dom进行处理,index名字是作用域名，表明属于index作用域。angular.module(&lsquo;index&rsquo;,[]).controller表明在index作用域内定义controller，同理ng-controller表明其内的变量属于IndexCtrl。
ng-model声明此标检绑定在new_contact变量，angularjs控制其值随变量而改变。ng-click声明由add_contact处理点击。在li标签里面的ng-repeat=&ldquo;contact in contacts"语句是一个AngularJS迭代器。这个迭代器告诉AngularJS用第一个li标签作为模板为列表中的每一个联系人创建一个li元素。由此当点击新增按钮时将输入框内所代表的model添加到contacts内，并将add_contact变量置空，而页面的显示由angularjs自动完成。
angularjs只对ng-app内的dom起作用，因此可以在任何页面使用angularjs而不破坏ng-app外的所有dom，js。
angularjs与restful后端交互非常方便，使用ngResource组件，声明好CRUD的路径、http veb，就可方便调用save,update与后端交互。
Demo
<code>coffeescript
app=angular.module("index",["ngResource"])
app.factory "Contact",($resource) -&gt;
$resource("/contacts/:id.json",{id:"@id"},{update:{method:"put"}})
$scope.contacts = Contact.query # /contacts
Contact.save $scope.new_contact #create
contact.$update #更新
</code></p>

<p>转载请注明出处:<a href="http://me.angry-arthas.com/blog/2015/09/06/angularjsqian-chang-1/">me.angry-arthas.com/blog/2015/09/06/angularjsqian-chang-1/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Constructor &amp;&amp; Prototype]]></title>
    <link href="http://me.angry-arthas.com/blog/2015/03/18/constructor-and-and-prototype/"/>
    <updated>2015-03-18T16:42:25+08:00</updated>
    <id>http://me.angry-arthas.com/blog/2015/03/18/constructor-and-and-prototype</id>
    <content type="html"><![CDATA[<p>每个对象都是个散列表
每个原型都有相关连的函数,每个函数都有相关联的原型</p>

<pre><code class="js">var A = function(){};
var p = A.prototype ;
var c = p.constructor;
A==c
</code></pre>

<p>函数的对象的constructor就是该函数（未修改prototype）
<code>js
function A() {
}
var a = new A();
a.constructor == A
</code>
修改函数的prototype后其对象的constructor为新的prototype的constructor
<code>js
function A(){};
function B(){};
A.prototype = new B();
console.log((new A()).constructor); //为function B(){}
A.prototype.constructor = A;
console.log((new A()).constructor);//为function A(){}
</code>
{}(对象直接量)对象是function Object(){}的对象</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffeescript的=>]]></title>
    <link href="http://me.angry-arthas.com/blog/2014/08/27/coffeescriptde-equals-%3E/"/>
    <updated>2014-08-27T16:05:54+08:00</updated>
    <id>http://me.angry-arthas.com/blog/2014/08/27/coffeescriptde-equals-></id>
    <content type="html"><![CDATA[<p>瘦箭头 ->用于 function创建
<code>coffeescript
$("#login").click -&gt;
  alert("ca")
</code>
胖箭头=>把 this作为参数代入function
在function中使用this 为外部定义function的this，起到作用域转移的作用
<code>coffeescript
user_id="nidaye"
ele.addEventListener "click",(e)=&gt;
  alert(this.user_id)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Js闭包]]></title>
    <link href="http://me.angry-arthas.com/blog/2014/08/08/jsbi-bao/"/>
    <updated>2014-08-08T10:58:57+08:00</updated>
    <id>http://me.angry-arthas.com/blog/2014/08/08/jsbi-bao</id>
    <content type="html"><![CDATA[<p>创建一个对象时如果该对象用到某个内部作用域的变量，那么对这个内部作用域创建一个闭包</p>

<p>eg
<code>javascript
function a(){
  var n=0;
  addN=function(){
    n+=1;
    console.log(n);
  };
  return addN;
}
x=a();     //创建一个闭包
x();       //输出1
x();       //输出2
y=a();     //创建另一个闭包
y();       //输出1
</code></p>
]]></content>
  </entry>
  
</feed>
